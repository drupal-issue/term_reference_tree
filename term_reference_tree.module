<?php

/**
 * Implementation of hook_menu().
 */
function term_reference_tree_menu(){
  return array(
    'term-reference-tree/%/%/%/%taxonomy_term/%' => array(
      'title' => 'term_reference_tree callback',
      'title callback' => FALSE,
      'page callback' => 'term_reference_tree_page_callback',
      'page arguments' => array(
        1,
        2,
        3,
        4,
        5
      ),
      'delivery callback' => 'ajax_deliver',
      'access callback' => 'term_reference_tree_access_callback',
      'access arguments' => array(
        1,
        2,
        3,
        4
      )
    )
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function term_reference_tree_field_widget_settings_form($field, $instance){
  $form = array();
  if($instance['widget']['type'] == 'term_reference_tree'){
    $form['leaves_only'] = array(
      '#type' => 'checkbox',
      '#title' => t('Leaves only'),
      '#description' => t("Don't allow the user to select items that have children"),
      '#default_value' => isset($instance['widget']['settings']['leaves_only']) ? $instance['widget']['settings']['leaves_only'] : 0,
      '#return_value' => 1
    );
    $form['link_terms'] = array(
      '#type' => 'checkbox',
      '#title' => t('Link terms'),
      '#description' => t("Add the term names as links to their term page."),
      '#default_value' => isset($instance['widget']['settings']['link_terms']) ? $instance['widget']['settings']['link_terms'] : 0,
      '#return_value' => 1
    );
    if(module_exists('views')){
      $views = views_get_all_views();
      $options = array(
        '' => 'none'
      );
      foreach($views as $name => $view){
        if($view->base_table == 'taxonomy_term_data'){
          foreach($view->display as $display){
            $options["$name:{$display->id}"] = "{$view->human_name}: {$display->display_title}";
          }
        }
      }
      $form['filter_view'] = array(
        '#type' => 'select',
        '#title' => 'Filter by view',
        '#description' => t("Filter the available options based on whether they appear in the selected view."),
        '#default_value' => isset($instance['widget']['settings']['filter_view']) ? $instance['widget']['settings']['filter_view'] : '',
        '#options' => $options
      );
    }else{
      $form['filter_view'] = array(
        '#type' => 'hidden',
        '#value' => isset($instance['widget']['settings']['filter_view']) ? $instance['widget']['settings']['filter_view'] : ''
      );
    }
  }
  return $form;
}

/**
 * Callback used to return the additional HTML for a branch in a tree
 */
function term_reference_tree_page_callback($entity, $field_name, $bundle, $term, $element_id){
  // Note, we do not need to worry about default values here, as all boxes that
  // were default checked will already be on the web page, therefore all 
  // checkboxes being asked for will not be checked.
  // Load the field instance first, so that we can check settings.
  $field_instance = field_info_instance($entity, $field_name, $bundle);
  $field = field_info_field($field_name);
  $variables = array(
    'vid' => $term->vid,
    'tid' => $term->tid,
    'element' => array(
      '#id' => $element_id,
      '#link_terms' => $field_instance['widget']['settings']['link_terms'],
      '#multiple' => $field['cardinality'],
      '#leaves_only' => $field_instance['widget']['settings']['leaves_only']
    )
  );
  return theme('options_tree', $variables);
}

/**
 * Access callback.  Checks that the user has editing privileges for this form.
 */
function term_reference_tree_access_callback($field_name, $term){
  // For now, we simply return TRUE.
  return TRUE;
}

/**
 * Implements hook_field_widget_info().
 */
function term_reference_tree_field_widget_info(){
  return array(
    'term_reference_tree' => array(
      'label' => 'Term reference tree',
      'field types' => array(
        'taxonomy_term_reference'
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_DEFAULT
      )
    )
  );
}

/**
 * Implements hook_element_info().
 */
function term_reference_tree_element_info(){
  $types = array(
    'options_tree' => array(
      '#input' => true,
      '#theme' => array(
        'options_tree'
      ),
      '#pre_render' => array(
        'form_pre_render_conditional_form_element'
      )
    )
  );
  return $types;
}

/**
 * Implements hook_theme().
 */
function term_reference_tree_theme(){
  return array(
    'options_tree' => array(
      'render element' => 'element'
    ),
    'options_tree_term' => array(
      'term' => 'term',
      'tid' => 'tid',
      'vid' => 'vid'
    ),
    'options_tree_expand_button' => array(
      'field_id' => 'field_id',
      'term' => 'term'
    )
  );
}

/**
 * 
 */
function theme_options_tree_expand_button($variables){
  // Check if the term has any children, if so, we need to return a plus, else
  // we return a blank.
  $children = taxonomy_get_children($variables['term']->tid, $variables['term']->vid);
  $output = "<span id=\"{$variables['field_id']}__{$variables['term']->tid}\" class=\"options_tree_plus ";
  if(count($children)){
    $output .= 'plus';
  }else{
    $output .= 'leaf';
  }
  return $output . '"><img src="' . base_path() . drupal_get_path('module', 'term_reference_tree') . '/images/blank.gif" width="16px" height="16px"/></span>';
}

/**
 * Returns HTML for a options_tree form element.
 *
 * @param $variables
 * An associative array containing:
 * - element: An associative array containing the properties of the element.
 */
function theme_options_tree($variables){
  if(!isset($variables['vid'])){
    $vocabulary = taxonomy_vocabulary_machine_name_load($variables['element']['#vocabulary']);
    $variables['vid'] = $vocabulary->vid;
    $variables['tid'] = 0;
  }
  // Get the root terms.  These will need to be merged with the ancestors of the
  // "default_value" terms.
  $root_terms = taxonomy_get_tree($variables['vid'], $variables['tid'], 1);
  $output = "<ul>";
  foreach($root_terms as $term){
    $variables['term'] = $term;
    $output .= theme('options_tree_term', $variables);
  }
  return $output . '</ul>';
}

function theme_options_tree_term($variables){
  $checkbox_variables = array(
    'element' => array(
      '#id' => $variables['element']['#id'] . '-' . $variables['term']->tid,
      '#name' => $variables['element']['#id'] . '[]',
      '#return_value' => $variables['term']->tid,
    )
  );
  $variables['tid'] = $variables['term']->tid;
  $display_text = check_plain($variables['term']->name);  
  if(isset($variables['element']['#link_terms']) && $variables['element']['#link_terms']){
    $uri = taxonomy_term_uri($variables['term']);
    $display_text = l($display_text, $uri['path']);
  }
  // If we're only showing leaves, then we need only return a basic <li> element
  if($variables['element']['#leaves_only']){
    // Does this term have children, if so, return the basic element
    $children = taxonomy_get_children($variables['term']->tid, $variables['term']->vid);
    if(count($children)){
      return '<li>'.theme('options_tree_expand_button', array(
        'field_id' => $variables['element']['#id'],
        'term' => $variables['term']
      )) .'<label><input type="hidden" value="1">'.$display_text . '</label></li>';      
    }
  }
  if($variables['element']['#multiple'] == 1){
    $radio_or_checkbox = 'radio';
    if(isset($variables['element']['#default_value'][0])){
      $checkbox_variables['element']['#value'] = $variables['element']['#default_value'][0];
    }
  }else{
    $radio_or_checkbox = 'checkbox';
    if(isset($variables['element']['#default_value']) && array_search($variables['term']->tid, $variables['element']['#default_value']) !== FALSE){
      $checkbox_variables['element']['#checked'] = TRUE;
    }else{
      $checkbox_variables['element']['#checked'] = FALSE;
    }
  }
  return '<li>' . theme('options_tree_expand_button', array(
    'field_id' => $variables['element']['#id'],
    'term' => $variables['term']
  )) . '<label>' . theme($radio_or_checkbox, $checkbox_variables) . $display_text . '</label>' . //theme('options_tree', $variables) . 
'</li>';
}

/**
 * Implements hook_widget_field_form().
 */
function term_reference_tree_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element){
  // TODO - Add default values
  $default_value = array();
  foreach($items as $item){
    $default_value[] = $item['tid'];
  }
  $element += array(
    '#type' => 'options_tree',
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'term_reference_tree') . '/term_reference_tree.css'
      ),
      'js' => array(
        drupal_get_path('module', 'term_reference_tree') . '/term_reference_tree.js' => array(
          'type' => 'file'
        ),
        array(
          'data' => array(
            'term_reference_tree' => array(
              'callback' => url("term-reference-tree/{$instance['entity_type']}/{$instance['field_name']}/{$instance['bundle']}"),
              'plus_html' => '',
              'minus_html' => ''
            )
          ),
          'type' => 'setting'
        )
      )
    ),
    '#multiple' => $field['cardinality'],
    '#vocabulary' => $field['settings']['allowed_values'][0]['vocabulary'],
    '#tid' => 0,
    '#value_callback' => '_term_reference_tree_widget_set_values',
    '#default_value' => $default_value,
    '#leaves_only' => $instance['widget']['settings']['leaves_only'],
    '#link_terms' => $instance['widget']['settings']['link_terms'],
    '#element_validate' => array(
      '_term_reference_tree_widget_validate'
    )
  );
  return $element;
}

/**
 * Set the values based on the user input
 */
function _term_reference_tree_widget_set_values($element, $input = FALSE, $form_state = array()){
  if(isset($form_state['input'][$element['#id']])){
    $values = array();
    $vocabulary = taxonomy_vocabulary_machine_name_load($element['#vocabulary']);
    foreach($form_state['input'][$element['#id']] as $tid){
      $values[] = array(
        'tid' => $tid
      );
    }
    return $values;
  }else{
    return array();
  }
}

/**
 * Validates the terms selected are all leaves.
 */
function _term_reference_tree_widget_validate(&$element, &$form_state){
  return $element;
}